{"version":3,"file":"main.a388cbdbacb4591eb2f8.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAIA;AAEA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;;AAEA;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;;AAEA;AAAA;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAMA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AAAA;AAAA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AAtBA;AAmCA;;AAvEA;AAGA;;;AAHA;AAyEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxHA","sources":["/Volumes/DATA/Projects/book-downloader/src/App.tsx","/Volumes/DATA/Projects/book-downloader/webpack/runtime/getFullHash"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nimport Box from \"@mui/material/Box\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\n\nimport { ChapterModel } from \"./models/Chapter.model\";\n\nimport { BookList, BookListProps } from \"./BookList\";\nimport { Info } from \"./Infor\";\nimport { helper, withContainer } from \"./helper\";\nimport { control } from \"./controller\";\nimport { downloader } from \"./Downloader\";\nimport { AsyncDialogContainer, useConfirmDialog } from \"./AsyncDialog\";\n\ntype CacheItem = BookListProps | Promise<DownloadDataProps>;\n\nconst cacheData: Record<string, CacheItem> = {};\n\nconsole.log(chrome.extension.getBackgroundPage());\n\nconst activeTab = () => {\n  return new Promise<chrome.tabs.Tab>((next) => {\n    chrome.tabs.query({ active: true, currentWindow: true }, ([tab]) =>\n      next(tab)\n    );\n  });\n};\n//\"/static/client.js\", \"/static/metruyenchu.ebook.js\"\nconst executeScript = (src: string) => {\n  return new Promise<any>(async (next) => {\n    const { id } = await activeTab();\n    chrome.scripting.executeScript(\n      {\n        target: { tabId: id! },\n        files: [src],\n      },\n      ([{ result }]) => next(result)\n    );\n  });\n};\n\nactiveTab().then(({ id }) => {});\n\nfunction BookDownloader() {\n  const [props, setProps] = useState<BookListProps>();\n  const [image, setImage] = useState<Blob>();\n  const confirmDialog = useConfirmDialog();\n\n  useEffect(() => {\n    executeScript(\"/static/client.js\");\n\n    return control.effect(\"initialize\", async ({ href }: { href: string }) => {\n      let item = cacheData[href];\n      window.focus();\n      if (!item) {\n        setProps(undefined);\n        item = cacheData[href] = control.request(href);\n      }\n\n      if (item instanceof Promise) {\n        const data: DownloadDataProps = await item;\n        const { info, chapters, maxChunks = 5 } = data;\n        let { image = \"link\" } = data;\n        downloader.maxChunks = maxChunks;\n        let cover = (await helper.imageToBlob(info.cover)) ?? undefined;\n        info.description = helper.cleanHTML(info.description ?? \"\");\n        item = cacheData[href] = {\n          info: { ...info, cover, href: href },\n          chapters: chapters.map((chap, index) => {\n            return new ChapterModel(chap, image);\n          }),\n        };\n      }\n\n      setProps(item);\n    });\n  }, [confirmDialog]);\n\n  return (\n    <>\n      <AppBar position=\"sticky\">\n        <Toolbar variant=\"dense\">\n          <Typography\n            variant=\"subtitle1\"\n            component=\"div\"\n            whiteSpace=\"nowrap\"\n            overflow=\"hidden\"\n            textOverflow=\"ellipsis\"\n            sx={{ flexGrow: 1 }}\n          >\n            {props?.info.title}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      {props ? (\n        <>\n          <Info info={props.info} onImage={setImage} image={image} />\n          <BookList {...props} image={image} />\n        </>\n      ) : (\n        <Box\n          sx={{\n            position: \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n          }}\n        >\n          <CircularProgress />\n        </Box>\n      )}\n    </>\n  );\n}\n\nexport default withContainer(AsyncDialogContainer)(BookDownloader);\n","__webpack_require__.h = () => (\"137f892f436331aebb12\")"],"names":[],"sourceRoot":""}